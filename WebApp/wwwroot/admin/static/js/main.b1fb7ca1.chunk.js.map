{"version":3,"sources":["config.js","configuration/dataProvider/index.ts","configuration/dataProvider/AdminHttpClient.ts","authProvider.ts","pages/LoginForm.tsx","static/theme.ts","components/NotFound/NotFound.tsx","entities/teachers/TeacherCreate.tsx","entities/teachers/TeacherEdit.tsx","entities/teachers/TeacherList.tsx","entities/subject/SubjectList.tsx","entities/subject/SubjectCreate.tsx","entities/subject/SubjectEdit.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dataProvider","jsonServerProvider","config","url","options","headers","Headers","set","token","localStorage","getItem","authHeaderName","fetchUtils","fetchJson","login","username","password","captchaResult","request","Request","method","body","JSON","stringify","fetch","then","response","status","Error","json","data","accessToken","roles","setAuthData","logout","clearAuthData","Promise","resolve","checkError","error","reject","checkAuth","getToken","getPermissions","parse","removeItem","permissions","setItem","useStyles","makeStyles","theme","form","padding","input","marginTop","button","width","icon","marginRight","spacing","name","Input","meta","touched","inputProps","props","TextField","helperText","fullWidth","recaptchaRef","React","LoginForm","useSafeSetState","loading","setLoading","useLogin","translate","useTranslate","notify","useNotify","classes","onSubmit","values","catch","message","validate","errors","undefined","render","handleSubmit","e","preventDefault","current","execute","noValidate","className","autoFocus","id","component","label","disabled","type","autoComplete","reset","ref","size","sitekey","onChange","val","CardActions","Button","variant","color","CircularProgress","thickness","createMuiTheme","palette","primary","indigo","secondary","blue","Card","Title","title","CardContent","Typography","to","TeacherCreate","Create","SimpleForm","TextInput","required","source","TeacherEdit","Edit","undoable","SearchFilter","Filter","TeacherList","List","filters","Datagrid","rowClick","isRowSelectable","r","SubjectList","ReferenceField","reference","SubjectCreate","ReferenceInput","AutocompleteInput","SubjectEdit","russianMessages","require","i18nProvider","polyglotI18nProvider","LoginPage","Login","Fragment","App","Admin","catchAll","NotFound","authProvider","loginPage","Resource","list","create","edit","PostIcon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"+RAAe,EACC,gBADD,EAEF,+BAFE,EAGC,2C,QCIT,IAAMA,EAAeC,YAAmBC,GCDxC,SAAyBC,GAAsC,IAAzBC,EAAwB,uDAAT,GACrDA,EAAQC,UACXD,EAAQC,QAAU,IAAIC,SAExBF,EAAQC,QAAQE,IAAI,SAAU,oBAE9B,IAAMC,EAAQC,aAAaC,QAAQ,SAC7BC,EAAiC,gBAIvC,OAFAP,EAAQC,QAAQE,IAAII,EAApB,iBAA8CH,IAEvCI,IAAWC,UAAUV,EAAKC,MCdpB,GACXU,MAAO,YAA2G,IAAxGC,EAAuG,EAAvGA,SAAUC,EAA6F,EAA7FA,SAAUC,EAAmF,EAAnFA,cACpBC,EAAU,IAAIC,QAAQjB,EAAgB,CACxCkB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAER,WAAUC,aACjCX,QAAS,IAAIC,QAAQ,CAAE,eAAgB,mBAAoB,gBAAmBW,MAElF,OAAOO,MAAMN,GACRO,MAAK,SAAAC,GACF,GAAIA,EAASC,OAAS,KAAOD,EAASC,QAAU,IAC5C,MAAM,IAAIC,MAAM,mKAEpB,OAAOF,EAASG,UAEnBJ,MAAK,YAAuC,IAAD,IAAnCK,KAAQC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,MAC1BC,EAAYF,EAAaC,OAGrCE,OAAQ,WAEJ,OADAC,IACOC,QAAQC,WAEnBC,WAAY,SAACC,GACT,IAAMZ,EAASY,EAAMZ,OACrB,OAAe,MAAXA,GAA6B,MAAXA,GAClBQ,IACOC,QAAQI,UAEZJ,QAAQC,WAEnBI,UAAW,WACP,OAAOC,IAAaN,QAAQC,UAAYD,QAAQI,UAEpDG,eAAgB,WACZ,IAAMX,EAAQW,IACd,OAAOX,EAAQI,QAAQC,QAAQf,KAAKsB,MAAMZ,IAAUI,QAAQC,QAAQ,MAItEK,EAAW,kBAAMjC,aAAaC,QAAQ,UACtCiC,EAAiB,kBAAMlC,aAAaC,QAAQ,gBAE5CyB,EAAgB,WAClB1B,aAAaoC,WAAW,SACxBpC,aAAaoC,WAAW,gBAGtBZ,EAAc,SAACzB,EAAesC,GAChCrC,aAAasC,QAAQ,QAASvC,GAC9BC,aAAasC,QAAQ,cAAezB,KAAKC,UAAUuB,K,kHChCjDE,EAAYC,aACd,SAACC,GAAD,MAAmB,CACfC,KAAM,CACFC,QAAS,iBAEbC,MAAO,CACHC,UAAW,OAEfC,OAAQ,CACJC,MAAO,QAEXC,KAAM,CACFC,YAAaR,EAAMS,QAAQ,OAGnC,CAAEC,KAAM,gBAGNC,EAAQ,SAAC,GAAD,QACVC,KAAQC,EADE,EACFA,QAASxB,EADP,EACOA,MACVyB,EAFG,EAEVX,MACGY,EAHO,uCAKN,cAACC,EAAA,EAAD,qCACI3B,SAAUwB,IAAWxB,GACrB4B,WAAYJ,GAAWxB,GACnByB,GACAC,GAJR,IAKIG,WAAS,MAIfC,EAAoBC,cAkHXC,EApGmB,SAAAN,GAAU,IAAD,EACTO,aAAgB,GADP,mBAChCC,EADgC,KACvBC,EADuB,KAEjC5D,EAAQ6D,cACRC,EAAYC,cACZC,EAASC,cACTC,EAAUhC,EAAUiB,GAiC1B,OACI,8BACI,cAAC,IAAD,CACIgB,SAtBG,SAACC,GACZR,GAAW,GACX5D,EAAMoE,GACDzD,MAAK,WACFiD,GAAW,MAEdS,OAAM,SAAA5C,GACHmC,GAAW,GACXI,EACqB,kBAAVvC,EACDA,EACiB,qBAAVA,GAA0BA,EAAM6C,QAEnC7C,EAAM6C,QADN,wBAEV,eASJC,SAnCK,SAACH,GACd,IAAMI,EAAmD,CAAEvE,cAAUwE,EAAWvE,cAAUuE,GAQ1F,OANKL,EAAOnE,WACRuE,EAAOvE,SAAW6D,EAAU,2BAE3BM,EAAOlE,WACRsE,EAAOtE,SAAW4D,EAAU,2BAEzBU,GA2BCE,OAAQ,gBAvDPP,EAuDUQ,EAAH,EAAGA,aAAH,OACJ,uBAAMR,SAAU,SAACS,GACbA,EAAEC,iBACFtB,EAAauB,QAAQC,WACtBC,YAAU,EAHb,UAII,sBAAKC,UAAWf,EAAQ7B,KAAxB,UACI,qBAAK4C,UAAWf,EAAQ3B,MAAxB,SACI,cAAC,IAAD,CACI2C,WAAS,EACTC,GAAG,WACHrC,KAAK,WACLsC,UAAWrC,EACXsC,MAAOvB,EAAU,oBACjBwB,SAAU3B,MAGlB,qBAAKsB,UAAWf,EAAQ3B,MAAxB,SACI,cAAC,IAAD,CACI4C,GAAG,WACHrC,KAAK,WACLsC,UAAWrC,EACXsC,MAAOvB,EAAU,oBACjByB,KAAK,WACLD,SAAU3B,EACV6B,aAAa,uBAGrB,cAAC,IAAD,CAAO1C,KAAK,gBAAgBsC,WAlFvCjB,EAkF0D,WAC3CQ,IACApB,EAAauB,QAAQW,SApFlB,SAACtC,GAAD,OAC/B,cAAC,IAAD,CACIuC,IAAKnC,EACLoC,KAAK,YACLC,QAASxG,EACTyG,SAAU,SAACC,GACP3C,EAAMZ,MAAMsD,SAASC,GACrB3B,cAgFY,cAAC4B,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CACIC,QAAQ,YACRV,KAAK,SACLW,MAAM,UACNZ,SAAU3B,EACVsB,UAAWf,EAAQzB,OALvB,UAOKkB,GACG,cAACwC,EAAA,EAAD,CACIlB,UAAWf,EAAQvB,KACnBgD,KAAM,GACNS,UAAW,IAGlBtC,EAAU,iC,sDCxJ9B1B,EAAQiE,YAAe,CAClCC,QAAS,CACPC,QAASC,IACTC,UAAWC,O,2CCAA,qBACb,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,MAAM,4DACb,eAACC,EAAA,EAAD,WACE,8HAEA,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CAAMC,GAAG,WAAT,uEAEF,cAACD,EAAA,EAAD,UACE,cAAC,IAAD,CAAMC,GAAG,UAAT,8E,wCCTKC,GAA0B,SAAA9D,GAAK,OAC1C,cAAC+D,GAAA,EAAD,2BAAY/D,GAAZ,aACE,cAACgE,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CAAW7C,SAAU8C,eAAYC,OAAO,OAAOhE,WAAS,EAACD,WAAW,oGAAoBgC,MAAM,6B,UCHvFkC,GAAwB,SAAApE,GACnC,OACE,cAACqE,GAAA,EAAD,2BAAUrE,GAAV,IAAiBsE,UAAU,EAA3B,SACE,cAACN,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CAAW7C,SAAU8C,eAAYC,OAAO,OAAOhE,WAAS,EAACD,WAAW,oGAAoBgC,MAAM,6B,wCCHhGqC,GAA8B,SAACvE,GAAD,OAClC,cAACwE,GAAA,EAAD,2BAAYxE,GAAZ,aACE,cAACiE,GAAA,EAAD,CAAW/B,MAAM,iCAAQiC,OAAO,aAIvBM,GAAwB,SAAAzE,GACnC,OACE,cAAC0E,GAAA,EAAD,2BAAU1E,GAAV,IAAiB2E,QAAS,cAAC,GAAD,IAAkBjB,MAAM,4HAAlD,SACE,cAACkB,GAAA,EAAD,CAAUC,SAAS,OAAOC,gBAAiB,SAAAC,GAAC,OAAI,GAAhD,SACE,cAAC,KAAD,CAAWZ,OAAO,OAAOjC,MAAM,6B,UCTjCqC,GAA8B,SAACvE,GAAD,OAClC,cAACwE,GAAA,EAAD,2BAAYxE,GAAZ,aACE,cAACiE,GAAA,EAAD,CAAW/B,MAAM,iCAAQiC,OAAO,aAIvBa,GAAwB,SAAAhF,GACnC,OACE,cAAC0E,GAAA,EAAD,2BAAU1E,GAAV,IAAiB2E,QAAS,cAAC,GAAD,IAAkBjB,MAAM,4HAAlD,SACE,eAACkB,GAAA,EAAD,CAAUC,SAAS,OAAOC,gBAAiB,SAAAC,GAAC,OAAI,GAAhD,UACE,cAAC,KAAD,CAAWZ,OAAO,OAAOjC,MAAM,uBAC/B,cAAC+C,GAAA,EAAD,CAAgB/C,MAAM,iFAAgBgD,UAAU,UAAUf,OAAO,YAAjE,SACI,cAAC,KAAD,CAAWA,OAAO,OAAOjC,MAAM,gC,oBCZ9BiD,GAA0B,SAAAnF,GAAK,OAC1C,cAAC+D,GAAA,EAAD,2BAAY/D,GAAZ,aACE,eAACgE,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,CAAW7C,SAAU8C,eAAYC,OAAO,OAAOhE,WAAS,EAACD,WAAW,oGAAoBgC,MAAM,qDAC9F,cAACkD,GAAA,EAAD,CAAgBlD,MAAM,iFAAgBgD,UAAU,UAAUf,OAAO,YAAjE,SACE,cAACkB,GAAA,EAAD,CAAmBlB,OAAO,kBCLrBmB,GAAwB,SAAAtF,GACnC,OACE,cAACqE,GAAA,EAAD,2BAAUrE,GAAV,IAAiBsE,UAAU,EAA3B,SACE,eAACN,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,CAAW7C,SAAU8C,eAAYC,OAAO,OAAOhE,WAAS,EAACD,WAAW,oGAAoBgC,MAAM,qDAC9F,cAACkD,GAAA,EAAD,CAAgBlD,MAAM,iFAAgBgD,UAAU,UAAUf,OAAO,YAAjE,SACE,cAACkB,GAAA,EAAD,CAAmBlB,OAAO,kBCU9BoB,GAAkBC,EAAQ,KAE1BC,GAAeC,aAAqB,kBAAMH,KAAiB,MAE3DI,GAAY,SAAC3F,GACjB,OAAO,cAAC4F,EAAA,EAAD,2BAAW5F,GAAX,aACH,cAAC,IAAM6F,SAAP,UACE,cAAC,EAAD,eAAe7F,UAKR,SAAS8F,KACtB,OACE,eAACC,EAAA,EAAD,CACE9G,MAAOA,EACPlD,aAAcA,EACdiK,SAAUC,GACVR,aAAcA,GACdS,aAAcA,EACdC,UAAWR,GANb,UAQE,cAACS,EAAA,EAAD,CAAUzG,KAAK,UACb0G,KAAM5B,GACN6B,OAAQxC,GACRyC,KAAMnC,GACN5E,KAAMgH,IACNrK,QAAS,CACP+F,MAAO,oFAIX,cAACkE,EAAA,EAAD,CAAUzG,KAAK,UACb0G,KAAMrB,GACNsB,OAAQnB,GACRoB,KAAMjB,GACN9F,KAAMgH,IACNrK,QAAS,CACP+F,MAAO,yDC9DjB,IAYeuE,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnJ,MAAK,YAAkD,IAA/CoJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAAS1F,OACP,cAAC,GAAD,IACA2F,SAASC,eAAe,SAI1BV,O","file":"static/js/main.b1fb7ca1.chunk.js","sourcesContent":["export default {\r\n    baseApiUrl: '/admin/api/v1',\r\n    authUrl: '/admin/api/v1/account/signIn',\r\n    captchaKey: '6LfYm5UaAAAAAEcv54Rhac9NXboKF9bFRyP53NcV',\r\n}\r\n","// Core\r\nimport jsonServerProvider from 'ra-data-json-server';\r\n\r\n// Components\r\nimport config from '../../config';\r\nimport { AdminHttpClient } from './AdminHttpClient';\r\n\r\nexport const dataProvider = jsonServerProvider(config.baseApiUrl, AdminHttpClient);\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nimport { fetchUtils } from 'react-admin';\r\n\r\nconst isQa = false;\r\n\r\nexport function AdminHttpClient(url: string, options: any = {}): any {\r\n  if (!options.headers) \r\n    options.headers = new Headers();\r\n\r\n  options.headers.set('Accept', 'application/json');\r\n\r\n  const token = localStorage.getItem('token');\r\n  const authHeaderName = isQa ? 'Auth' : 'Authorization';\r\n\r\n  options.headers.set(authHeaderName, `Bearer ${token}`);\r\n\r\n  return fetchUtils.fetchJson(url, options);\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport config from \"./config\";\r\n\r\nexport default {\r\n    login: ({ username, password, captchaResult }: { username: string, password: string, captchaResult: string }) => {\r\n        const request = new Request(config.authUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ username, password }),\r\n            headers: new Headers({ 'Content-Type': 'application/json', 'CaptchaResponse': captchaResult }),\r\n        });\r\n        return fetch(request)\r\n            .then(response => {\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error('Неправильный логин или пароль');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(({ data: { accessToken, roles } }) => {\r\n                setAuthData(accessToken, roles);\r\n            });\r\n    },\r\n    logout: () => {\r\n        clearAuthData();\r\n        return Promise.resolve();\r\n    },\r\n    checkError: (error: any) => {\r\n        const status = error.status;\r\n        if (status === 401 || status === 403) {\r\n            clearAuthData();\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    checkAuth: () => {\r\n        return getToken() ? Promise.resolve() : Promise.reject();\r\n    },\r\n    getPermissions: () => {\r\n        const roles = getPermissions();\r\n        return roles ? Promise.resolve(JSON.parse(roles)) : Promise.resolve([]);\r\n    }\r\n};\r\n\r\nconst getToken = () => localStorage.getItem('token');\r\nconst getPermissions = () => localStorage.getItem('permissions');\r\n\r\nconst clearAuthData = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('permissions');\r\n}\r\n\r\nconst setAuthData = (token: string, permissions: string[]) => {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('permissions', JSON.stringify(permissions));\r\n}\r\n","/* eslint-disable */\r\n\r\nimport * as React from 'react';\r\nimport { FunctionComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Field, Form } from 'react-final-form';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useTranslate, useLogin, useNotify, useSafeSetState, LoginComponent } from 'ra-core';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport config from '../config';\r\n\r\ninterface FormData {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme) => ({\r\n        form: {\r\n            padding: '0 1em 1em 1em',\r\n        },\r\n        input: {\r\n            marginTop: '1em',\r\n        },\r\n        button: {\r\n            width: '100%',\r\n        },\r\n        icon: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n    }),\r\n    { name: 'RaLoginForm' }\r\n);\r\n\r\nconst Input = ({\r\n    meta: { touched, error },\r\n    input: inputProps,\r\n    ...props\r\n}: {meta: any, input: any}) => (\r\n        <TextField\r\n            error={!!(touched && error)}\r\n            helperText={touched && error}\r\n            {...inputProps}\r\n            {...props}\r\n            fullWidth\r\n        />\r\n    );\r\n\r\nconst recaptchaRef: any = React.createRef();\r\n\r\nconst Captcha = (onSubmit: any) => (props: any) => (\r\n    <ReCAPTCHA\r\n        ref={recaptchaRef}\r\n        size=\"invisible\"\r\n        sitekey={config.captchaKey}\r\n        onChange={(val: any) => {\r\n            props.input.onChange(val);\r\n            onSubmit();\r\n        }}\r\n    />\r\n);\r\n\r\nconst LoginForm: LoginComponent = props => {\r\n    const [loading, setLoading] = useSafeSetState(false);\r\n    const login = useLogin();\r\n    const translate = useTranslate();\r\n    const notify = useNotify();\r\n    const classes = useStyles(props);\r\n\r\n    const validate = (values: FormData) => {\r\n        const errors: { username?: string, password?: string } = { username: undefined, password: undefined };\r\n\r\n        if (!values.username) {\r\n            errors.username = translate('ra.validation.required');\r\n        }\r\n        if (!values.password) {\r\n            errors.password = translate('ra.validation.required');\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const submit = (values: any) => {\r\n        setLoading(true);\r\n        login(values)\r\n            .then(() => {\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                setLoading(false);\r\n                notify(\r\n                    typeof error === 'string'\r\n                        ? error\r\n                        : typeof error === 'undefined' || !error.message\r\n                            ? 'ra.auth.sign_in_error'\r\n                            : error.message,\r\n                    'warning'\r\n                );\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                onSubmit={submit}\r\n                validate={validate}\r\n                render={({ handleSubmit }) => (\r\n                    <form onSubmit={(e: any) => {\r\n                        e.preventDefault();\r\n                        recaptchaRef.current.execute();\r\n                    }} noValidate>\r\n                        <div className={classes.form}>\r\n                            <div className={classes.input}>\r\n                                <Field\r\n                                    autoFocus\r\n                                    id=\"username\"\r\n                                    name=\"username\"\r\n                                    component={Input}\r\n                                    label={translate('ra.auth.username')}\r\n                                    disabled={loading}\r\n                                />\r\n                            </div>\r\n                            <div className={classes.input}>\r\n                                <Field\r\n                                    id=\"password\"\r\n                                    name=\"password\"\r\n                                    component={Input}\r\n                                    label={translate('ra.auth.password')}\r\n                                    type=\"password\"\r\n                                    disabled={loading}\r\n                                    autoComplete=\"current-password\"\r\n                                />\r\n                            </div>\r\n                            <Field name='captchaResult' component={Captcha(() => {\r\n                                handleSubmit();\r\n                                recaptchaRef.current.reset();\r\n                            })}/>\r\n                        </div>\r\n                        <CardActions>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                type=\"submit\"\r\n                                color=\"primary\"\r\n                                disabled={loading}\r\n                                className={classes.button}\r\n                            >\r\n                                {loading && (\r\n                                    <CircularProgress\r\n                                        className={classes.icon}\r\n                                        size={18}\r\n                                        thickness={2}\r\n                                    />\r\n                                )}\r\n                                {translate('ra.auth.sign_in')}\r\n                            </Button>\r\n                        </CardActions>\r\n                    </form>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import indigo from '@material-ui/core/colors/indigo';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: indigo,\r\n    secondary: blue\r\n  },\r\n});","import * as React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Title } from 'react-admin';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () => (\r\n  <Card>\r\n    <Title title=\"Не нашлось\" />\r\n    <CardContent>\r\n      <h1>Ничего не нашлось</h1>\r\n\r\n      <Typography>\r\n        <Link to=\"/vaccine\">к вакцинам</Link>\r\n      </Typography>\r\n      <Typography>\r\n        <Link to=\"/diseas\">к болезням</Link>\r\n      </Typography>\r\n    </CardContent>\r\n  </Card>\r\n);","import React from 'react';\r\nimport {\r\n  Create,\r\n  required,\r\n  SimpleForm,\r\n  TextInput,\r\n} from 'react-admin';\r\n\r\nexport const TeacherCreate: React.FC = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput validate={required()} source=\"name\" fullWidth helperText=\"Имя преподавателя\" label=\"имя\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);","import React from 'react';\r\nimport {\r\n  Edit,\r\n  SimpleForm,\r\n  TextInput,\r\n  required\r\n} from 'react-admin';\r\n\r\nexport const TeacherEdit: React.FC = props => {\r\n  return (\r\n    <Edit {...props} undoable={false}>\r\n      <SimpleForm>\r\n        <TextInput validate={required()} source=\"name\" fullWidth helperText=\"имя преподавателя\" label=\"имя\" />\r\n      </SimpleForm>\r\n    </Edit>\r\n  )\r\n};","import React from 'react';\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  Filter,\r\n  TextInput,\r\n} from 'react-admin';\r\n\r\nconst SearchFilter: React.FC<any> = (props) => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"поиск\" source=\"name\" />\r\n  </Filter>\r\n);\r\n\r\nexport const TeacherList: React.FC = props => {\r\n  return (\r\n    <List {...props} filters={<SearchFilter />} title=\"Список преподавателей\">\r\n      <Datagrid rowClick=\"edit\" isRowSelectable={r => false}>\r\n        <TextField source=\"name\" label=\"имя\" />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};","import React from 'react';\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  Filter,\r\n  TextInput,\r\n  ReferenceField,\r\n} from 'react-admin';\r\n\r\nconst SearchFilter: React.FC<any> = (props) => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"поиск\" source=\"name\" />\r\n  </Filter>\r\n);\r\n\r\nexport const SubjectList: React.FC = props => {\r\n  return (\r\n    <List {...props} filters={<SearchFilter />} title=\"Список преподавателей\">\r\n      <Datagrid rowClick=\"edit\" isRowSelectable={r => false}>\r\n        <TextField source=\"name\" label=\"имя\" />\r\n        <ReferenceField label=\"Преподаватель\" reference=\"teacher\" source=\"teacherId\">\r\n            <TextField source=\"name\" label=\"имя\" />\r\n        </ReferenceField>\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};","import React from 'react';\r\nimport {\r\n  Create,\r\n  required,\r\n  SimpleForm,\r\n  TextInput,\r\n  ReferenceInput,\r\n  AutocompleteInput,\r\n} from 'react-admin';\r\n\r\nexport const SubjectCreate: React.FC = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput validate={required()} source=\"name\" fullWidth helperText=\"название предмета\" label=\"название\" />\r\n      <ReferenceInput label=\"Преподаватель\" reference=\"teacher\" source=\"teacherId\">\r\n        <AutocompleteInput source=\"name\" />\r\n      </ReferenceInput>\r\n    </SimpleForm>\r\n  </Create>\r\n);","import React from 'react';\r\nimport {\r\n  Edit,\r\n  SimpleForm,\r\n  TextInput,\r\n  required,\r\n  ReferenceInput,\r\n  AutocompleteInput,\r\n} from 'react-admin';\r\n\r\nexport const SubjectEdit: React.FC = props => {\r\n  return (\r\n    <Edit {...props} undoable={false}>\r\n      <SimpleForm>\r\n        <TextInput validate={required()} source=\"name\" fullWidth helperText=\"название предмета\" label=\"название\" />\r\n        <ReferenceInput label=\"Преподаватель\" reference=\"teacher\" source=\"teacherId\">\r\n          <AutocompleteInput source=\"name\" />\r\n        </ReferenceInput>\r\n      </SimpleForm>\r\n    </Edit>\r\n  )\r\n};","import React from 'react';\r\nimport { Admin, Resource, Login } from 'react-admin';\r\nimport PostIcon from '@material-ui/icons/Book';\r\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\r\n\r\nimport { dataProvider } from './configuration';\r\n\r\nimport authProvider from './authProvider';\r\nimport LoginForm from './pages/LoginForm';\r\n\r\nimport './App.css';\r\nimport { theme } from './static/theme';\r\nimport NotFound from './components/NotFound/NotFound';\r\n\r\nimport {\r\n  TeacherCreate,\r\n  TeacherEdit,\r\n  TeacherList,\r\n} from './entities/teachers';\r\n\r\nimport {\r\n  SubjectCreate,\r\n  SubjectEdit,\r\n  SubjectList,\r\n} from './entities/subject';\r\n\r\nconst russianMessages = require('ra-language-russian');\r\n\r\nconst i18nProvider = polyglotI18nProvider(() => russianMessages, 'ru');\r\n\r\nconst LoginPage = (props: any) => {\r\n  return <Login {...props}>\r\n      <React.Fragment>\r\n        <LoginForm {...props} />\r\n      </React.Fragment>\r\n    </Login>\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <Admin\r\n      theme={theme}\r\n      dataProvider={dataProvider}\r\n      catchAll={NotFound}\r\n      i18nProvider={i18nProvider}\r\n      authProvider={authProvider}\r\n      loginPage={LoginPage}\r\n    >\r\n      <Resource name=\"teacher\" \r\n        list={TeacherList} \r\n        create={TeacherCreate}\r\n        edit={TeacherEdit}\r\n        icon={PostIcon} \r\n        options={{\r\n          label: 'Преподаватели'\r\n        }} \r\n      />\r\n\r\n      <Resource name=\"subject\" \r\n        list={SubjectList} \r\n        create={SubjectCreate}\r\n        edit={SubjectEdit}\r\n        icon={PostIcon} \r\n        options={{\r\n          label: 'Предметы'\r\n        }} \r\n      />\r\n\r\n    </Admin>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}