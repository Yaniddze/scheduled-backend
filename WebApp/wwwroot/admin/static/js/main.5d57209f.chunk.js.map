{"version":3,"sources":["config.js","configuration/dataProvider/index.ts","configuration/dataProvider/AdminHttpClient.ts","authProvider.ts","pages/LoginForm.tsx","components/NotFound/NotFound.tsx","entities/teachers/TeacherCreate.tsx","entities/teachers/TeacherEdit.tsx","entities/teachers/TeacherList.tsx","entities/subject/SubjectList.tsx","entities/subject/SubjectCreate.tsx","entities/subject/SubjectEdit.tsx","entities/groups/GroupList.tsx","entities/groups/GroupCreate.tsx","entities/groups/GroupEdit.tsx","entities/groupSubject/GroupSubjectList.tsx","entities/groupSubject/GroupSubjectCreate.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dataProvider","jsonServerProvider","config","url","options","headers","Headers","set","token","localStorage","getItem","authHeaderName","fetchUtils","fetchJson","login","username","password","captchaResult","request","Request","method","body","JSON","stringify","fetch","then","response","status","Error","json","data","accessToken","roles","setAuthData","logout","clearAuthData","Promise","resolve","checkError","error","reject","checkAuth","getToken","getPermissions","parse","removeItem","permissions","setItem","useStyles","makeStyles","theme","form","padding","input","marginTop","button","width","icon","marginRight","spacing","name","Input","meta","touched","inputProps","props","TextField","helperText","fullWidth","recaptchaRef","React","LoginForm","useSafeSetState","loading","setLoading","useLogin","translate","useTranslate","notify","useNotify","classes","onSubmit","values","catch","message","validate","errors","undefined","render","handleSubmit","e","preventDefault","current","execute","noValidate","className","autoFocus","id","component","label","disabled","type","autoComplete","reset","ref","size","sitekey","onChange","val","CardActions","Button","variant","color","CircularProgress","thickness","Card","Title","title","CardContent","Typography","to","TeacherCreate","Create","SimpleForm","TextInput","required","source","TeacherEdit","Edit","undoable","SearchFilter","Filter","exporter","records","ExportToCsv","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","useTextFile","useBom","useKeysAsHeaders","generateCsv","TeacherList","List","filters","Datagrid","rowClick","isRowSelectable","r","ArrayField","SingleFieldList","ChipField","Tools","useState","open","setOpen","open2","setOpen2","setError","file","setFile","Toolbar","Dialog","onClose","style","onClick","accept","files","target","splitted","split","reverse","append","date","FormData","ExportButton","SubjectList","actions","ReferenceField","reference","SubjectCreate","ReferenceInput","AutocompleteInput","SubjectEdit","GroupList","GroupCreate","GroupEdit","GroupSubjectList","sort","field","order","FunctionField","sortBy","Date","startDate","toLocaleString","DeleteButton","GroupSubjectCreate","transform","selectedDate","time","getTime","offset","getTimezoneOffset","currentDate","toISOString","DateTimeInput","number","russianMessages","require","i18nProvider","polyglotI18nProvider","baseTheme","createMuiTheme","LoginPage","Login","Fragment","App","ThemeProvider","Admin","catchAll","NotFound","authProvider","loginPage","Resource","list","create","edit","PostIcon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5d57209f.chunk.js","sourcesContent":["export default {\r\n    baseApiUrl: '/admin/api/v1',\r\n    authUrl: '/admin/api/v1/account/signIn',\r\n    captchaKey: '6LfYm5UaAAAAAEcv54Rhac9NXboKF9bFRyP53NcV',\r\n}\r\n","// Core\r\nimport jsonServerProvider from 'ra-data-json-server';\r\n\r\n// Components\r\nimport config from '../../config';\r\nimport { AdminHttpClient } from './AdminHttpClient';\r\n\r\nexport const dataProvider = jsonServerProvider(config.baseApiUrl, AdminHttpClient);\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nimport { fetchUtils } from 'react-admin';\r\n\r\nconst isQa = false;\r\n\r\nexport function AdminHttpClient(url: string, options: any = {}): any {\r\n  if (!options.headers) \r\n    options.headers = new Headers();\r\n\r\n  options.headers.set('Accept', 'application/json');\r\n\r\n  const token = localStorage.getItem('token');\r\n  const authHeaderName = isQa ? 'Auth' : 'Authorization';\r\n\r\n  options.headers.set(authHeaderName, `Bearer ${token}`);\r\n\r\n  return fetchUtils.fetchJson(url, options);\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport config from \"./config\";\r\n\r\nexport default {\r\n    login: ({ username, password, captchaResult }: { username: string, password: string, captchaResult: string }) => {\r\n        const request = new Request(config.authUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ username, password }),\r\n            headers: new Headers({ 'Content-Type': 'application/json', 'CaptchaResponse': captchaResult }),\r\n        });\r\n        return fetch(request)\r\n            .then(response => {\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error('Неправильный логин или пароль');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(({ data: { accessToken, roles } }) => {\r\n                setAuthData(accessToken, roles);\r\n            });\r\n    },\r\n    logout: () => {\r\n        clearAuthData();\r\n        return Promise.resolve();\r\n    },\r\n    checkError: (error: any) => {\r\n        const status = error.status;\r\n        if (status === 401 || status === 403) {\r\n            clearAuthData();\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    checkAuth: () => {\r\n        return getToken() ? Promise.resolve() : Promise.reject();\r\n    },\r\n    getPermissions: () => {\r\n        const roles = getPermissions();\r\n        return roles ? Promise.resolve(JSON.parse(roles)) : Promise.resolve([]);\r\n    }\r\n};\r\n\r\nconst getToken = () => localStorage.getItem('token');\r\nconst getPermissions = () => localStorage.getItem('permissions');\r\n\r\nconst clearAuthData = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('permissions');\r\n}\r\n\r\nconst setAuthData = (token: string, permissions: string[]) => {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('permissions', JSON.stringify(permissions));\r\n}\r\n","/* eslint-disable */\r\n\r\nimport * as React from 'react';\r\nimport { FunctionComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Field, Form } from 'react-final-form';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useTranslate, useLogin, useNotify, useSafeSetState, LoginComponent } from 'ra-core';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport config from '../config';\r\n\r\ninterface FormData {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme) => ({\r\n        form: {\r\n            padding: '0 1em 1em 1em',\r\n        },\r\n        input: {\r\n            marginTop: '1em',\r\n        },\r\n        button: {\r\n            width: '100%',\r\n        },\r\n        icon: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n    }),\r\n    { name: 'RaLoginForm' }\r\n);\r\n\r\nconst Input = ({\r\n    meta: { touched, error },\r\n    input: inputProps,\r\n    ...props\r\n}: {meta: any, input: any}) => (\r\n        <TextField\r\n            error={!!(touched && error)}\r\n            helperText={touched && error}\r\n            {...inputProps}\r\n            {...props}\r\n            fullWidth\r\n        />\r\n    );\r\n\r\nconst recaptchaRef: any = React.createRef();\r\n\r\nconst Captcha = (onSubmit: any) => (props: any) => (\r\n    <ReCAPTCHA\r\n        ref={recaptchaRef}\r\n        size=\"invisible\"\r\n        sitekey={config.captchaKey}\r\n        onChange={(val: any) => {\r\n            props.input.onChange(val);\r\n            onSubmit();\r\n        }}\r\n    />\r\n);\r\n\r\nconst LoginForm: LoginComponent = props => {\r\n    const [loading, setLoading] = useSafeSetState(false);\r\n    const login = useLogin();\r\n    const translate = useTranslate();\r\n    const notify = useNotify();\r\n    const classes = useStyles(props);\r\n\r\n    const validate = (values: FormData) => {\r\n        const errors: { username?: string, password?: string } = { username: undefined, password: undefined };\r\n\r\n        if (!values.username) {\r\n            errors.username = translate('ra.validation.required');\r\n        }\r\n        if (!values.password) {\r\n            errors.password = translate('ra.validation.required');\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const submit = (values: any) => {\r\n        setLoading(true);\r\n        login(values)\r\n            .then(() => {\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                setLoading(false);\r\n                notify(\r\n                    typeof error === 'string'\r\n                        ? error\r\n                        : typeof error === 'undefined' || !error.message\r\n                            ? 'ra.auth.sign_in_error'\r\n                            : error.message,\r\n                    'warning'\r\n                );\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                onSubmit={submit}\r\n                validate={validate}\r\n                render={({ handleSubmit }) => (\r\n                    <form onSubmit={(e: any) => {\r\n                        e.preventDefault();\r\n                        recaptchaRef.current.execute();\r\n                    }} noValidate>\r\n                        <div className={classes.form}>\r\n                            <div className={classes.input}>\r\n                                <Field\r\n                                    autoFocus\r\n                                    id=\"username\"\r\n                                    name=\"username\"\r\n                                    component={Input}\r\n                                    label={translate('ra.auth.username')}\r\n                                    disabled={loading}\r\n                                />\r\n                            </div>\r\n                            <div className={classes.input}>\r\n                                <Field\r\n                                    id=\"password\"\r\n                                    name=\"password\"\r\n                                    component={Input}\r\n                                    label={translate('ra.auth.password')}\r\n                                    type=\"password\"\r\n                                    disabled={loading}\r\n                                    autoComplete=\"current-password\"\r\n                                />\r\n                            </div>\r\n                            <Field name='captchaResult' component={Captcha(() => {\r\n                                handleSubmit();\r\n                                recaptchaRef.current.reset();\r\n                            })}/>\r\n                        </div>\r\n                        <CardActions>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                type=\"submit\"\r\n                                color=\"primary\"\r\n                                disabled={loading}\r\n                                className={classes.button}\r\n                            >\r\n                                {loading && (\r\n                                    <CircularProgress\r\n                                        className={classes.icon}\r\n                                        size={18}\r\n                                        thickness={2}\r\n                                    />\r\n                                )}\r\n                                {translate('ra.auth.sign_in')}\r\n                            </Button>\r\n                        </CardActions>\r\n                    </form>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import * as React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Title } from 'react-admin';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () => (\r\n  <Card>\r\n    <Title title=\"Не нашлось\" />\r\n    <CardContent>\r\n      <h1>Ничего не нашлось</h1>\r\n\r\n      <Typography>\r\n        <Link to=\"/vaccine\">к вакцинам</Link>\r\n      </Typography>\r\n      <Typography>\r\n        <Link to=\"/diseas\">к болезням</Link>\r\n      </Typography>\r\n    </CardContent>\r\n  </Card>\r\n);","import React from 'react';\r\nimport {\r\n  Create,\r\n  required,\r\n  SimpleForm,\r\n  TextInput,\r\n} from 'react-admin';\r\n\r\nexport const TeacherCreate: React.FC = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput validate={required()} source=\"name\" fullWidth helperText=\"Имя преподавателя\" label=\"имя\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);","import React from 'react';\r\nimport {\r\n  Edit,\r\n  SimpleForm,\r\n  TextInput,\r\n  required\r\n} from 'react-admin';\r\n\r\nexport const TeacherEdit: React.FC = props => {\r\n  return (\r\n    <Edit {...props} undoable={false}>\r\n      <SimpleForm>\r\n        <TextInput validate={required()} source=\"name\" fullWidth helperText=\"имя преподавателя\" label=\"имя\" />\r\n      </SimpleForm>\r\n    </Edit>\r\n  )\r\n};","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  Filter,\r\n  TextInput,\r\n  downloadCSV,\r\n  ArrayField,\r\n  ChipField,\r\n  SingleFieldList,\r\n} from \"react-admin\";\r\nimport { ExportToCsv } from \"export-to-csv\";\r\n\r\nconst SearchFilter: React.FC<any> = (props) => (\r\n  <Filter {...props}>\r\n    <TextInput label='поиск' source='name' />\r\n  </Filter>\r\n);\r\n\r\nconst exporter = (records: any) => {\r\n  const options = {\r\n    fieldSeparator: \",\",\r\n    quoteStrings: '\"',\r\n    decimalSeparator: \".\",\r\n    showLabels: true,\r\n    showTitle: true,\r\n    title: \"teachers\",\r\n    useTextFile: false,\r\n    useBom: true,\r\n    useKeysAsHeaders: true,\r\n  };\r\n  const exporter = new ExportToCsv(options);\r\n  exporter.generateCsv(records);\r\n};\r\n\r\nexport const TeacherList: React.FC = (props) => {\r\n  return (\r\n    <List\r\n      {...props}\r\n      filters={<SearchFilter />}\r\n      title='Список преподавателей'\r\n      exporter={exporter as any}\r\n    >\r\n      <Datagrid rowClick='edit' isRowSelectable={(r) => false}>\r\n        <TextField source='name' label='имя' />\r\n        <ArrayField source='groups' label='Группы'>\r\n          <SingleFieldList>\r\n            <ChipField source='name' />\r\n          </SingleFieldList>\r\n        </ArrayField>\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  Filter,\r\n  TextInput,\r\n  ReferenceField,\r\n  Toolbar,\r\n  downloadCSV,\r\n  ExportButton,\r\n} from \"react-admin\";\r\nimport { Button, Dialog, Input } from \"@material-ui/core\";\r\nimport { ExportToCsv } from \"export-to-csv\";\r\n\r\nconst exporter = (records: any) => {\r\n  const options = {\r\n    fieldSeparator: \",\",\r\n    quoteStrings: '\"',\r\n    decimalSeparator: \".\",\r\n    showLabels: true,\r\n    showTitle: true,\r\n    title: \"subjects\",\r\n    useTextFile: false,\r\n    useBom: true,\r\n    useKeysAsHeaders: true,\r\n  };\r\n  const exporter = new ExportToCsv(options);\r\n  exporter.generateCsv(records);\r\n};\r\n\r\nconst SearchFilter: React.FC<any> = (props) => (\r\n  <Filter {...props}>\r\n    <TextInput label='поиск' source='name' />\r\n  </Filter>\r\n);\r\n\r\nconst Tools = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const [open2, setOpen2] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [file, setFile] = useState<File | undefined>(undefined);\r\n\r\n  const handleSubmit = () => {\r\n    if (file === undefined) {\r\n      setError(\"Выберите файл\");\r\n      return;\r\n    }\r\n\r\n    const splitted = file.name.split(\".\");\r\n    splitted.reverse();\r\n\r\n    if (splitted[0] !== \"doc\" && splitted[0] !== \"docx\") {\r\n      setError(\"Выберите файл word\");\r\n      return;\r\n    }\r\n\r\n    setError(\"\");\r\n\r\n    const headers = new Headers();\r\n\r\n    headers.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + (localStorage.getItem(\"token\") || \"\")\r\n    );\r\n\r\n    const date = new FormData();\r\n\r\n    date.append(\"file\", file);\r\n\r\n    fetch(\"/admin/api/v1/subject/parse\", {\r\n      method: \"POST\",\r\n      headers,\r\n      body: date,\r\n    }).then(() => {\r\n      setOpen(false);\r\n      setOpen2(true);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Toolbar>\r\n      <Dialog open={open2} onClose={() => setOpen2(false)}>\r\n        <div style={{ padding: \"20px\" }}>\r\n          <div>Вы успешно загрузили файл!</div>\r\n          <div>\r\n            <Button onClick={() => setOpen2(false)}>Закрыть</Button>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n      <Dialog open={open} onClose={() => setOpen(false)}>\r\n        <div style={{ padding: \"100px\" }}>\r\n          <div style={{ color: \"red\" }}>{error}</div>\r\n          <input\r\n            type='file'\r\n            accept='.doc,.docx'\r\n            onChange={(e) => {\r\n              const files = e.target.files;\r\n              if (files) setFile(files[0]);\r\n            }}\r\n          />\r\n          <div style={{ marginTop: \"20px\" }}>\r\n            <Button onClick={handleSubmit}>Отправить</Button>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n      <Button onClick={() => setOpen(true)}>Загрузить файл</Button>\r\n      <ExportButton />\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nexport const SubjectList: React.FC = (props) => {\r\n  return (\r\n    <List\r\n      actions={<Tools />}\r\n      {...props}\r\n      filters={<SearchFilter />}\r\n      title='Список преподавателей'\r\n      exporter={exporter as any}\r\n    >\r\n      <Datagrid rowClick='edit' isRowSelectable={(r) => false}>\r\n        <TextField source='name' label='имя' />\r\n        <ReferenceField\r\n          label='Преподаватель'\r\n          reference='teacher'\r\n          source='teacherId'\r\n        >\r\n          <TextField source='name' label='имя' />\r\n        </ReferenceField>\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Create,\r\n  required,\r\n  SimpleForm,\r\n  TextInput,\r\n  ReferenceInput,\r\n  AutocompleteInput,\r\n} from 'react-admin';\r\n\r\nexport const SubjectCreate: React.FC = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput validate={required()} source=\"name\" fullWidth helperText=\"название предмета\" label=\"название\" />\r\n      <ReferenceInput label=\"Преподаватель\" reference=\"teacher\" source=\"teacherId\">\r\n        <AutocompleteInput source=\"name\" />\r\n      </ReferenceInput>\r\n    </SimpleForm>\r\n  </Create>\r\n);","import React from 'react';\r\nimport {\r\n  Edit,\r\n  SimpleForm,\r\n  TextInput,\r\n  required,\r\n  ReferenceInput,\r\n  AutocompleteInput,\r\n} from 'react-admin';\r\n\r\nexport const SubjectEdit: React.FC = props => {\r\n  return (\r\n    <Edit {...props} undoable={false}>\r\n      <SimpleForm>\r\n        <TextInput validate={required()} source=\"name\" fullWidth helperText=\"название предмета\" label=\"название\" />\r\n        <ReferenceInput label=\"Преподаватель\" reference=\"teacher\" source=\"teacherId\">\r\n          <AutocompleteInput source=\"name\" />\r\n        </ReferenceInput>\r\n      </SimpleForm>\r\n    </Edit>\r\n  )\r\n};","import React, { useState } from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  Filter,\r\n  TextInput,\r\n  downloadCSV,\r\n  ArrayField,\r\n  SingleFieldList,\r\n  ChipField,\r\n} from \"react-admin\";\r\nimport { ExportToCsv } from \"export-to-csv\";\r\n\r\nconst exporter = (records: any) => {\r\n  const options = {\r\n    fieldSeparator: \",\",\r\n    quoteStrings: '\"',\r\n    decimalSeparator: \".\",\r\n    showLabels: true,\r\n    showTitle: true,\r\n    title: \"groups\",\r\n    useTextFile: false,\r\n    useBom: true,\r\n    useKeysAsHeaders: true,\r\n  };\r\n  const exporter = new ExportToCsv(options);\r\n  exporter.generateCsv(records);\r\n};\r\n\r\nconst SearchFilter: React.FC<any> = (props) => (\r\n  <Filter {...props}>\r\n    <TextInput label='поиск' source='q' />\r\n  </Filter>\r\n);\r\n\r\nexport const GroupList: React.FC = (props) => {\r\n  return (\r\n    <List\r\n      {...props}\r\n      filters={<SearchFilter />}\r\n      title='Список групп'\r\n      exporter={exporter as any}\r\n    >\r\n      <Datagrid rowClick='edit' isRowSelectable={(r) => false}>\r\n        <TextField source='name' label='название' />\r\n\r\n        <ArrayField source='teachers' label='Преподаватели'>\r\n          <SingleFieldList>\r\n            <ChipField source='name' />\r\n          </SingleFieldList>\r\n        </ArrayField>\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Create, required, SimpleForm, TextInput } from \"react-admin\";\r\n\r\nexport const GroupCreate: React.FC = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput\r\n        validate={required()}\r\n        source='name'\r\n        fullWidth\r\n        helperText='название гурппы'\r\n        label='название'\r\n      />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","import React from \"react\";\r\nimport { Edit, required, SimpleForm, TextInput } from \"react-admin\";\r\n\r\nexport const GroupEdit: React.FC = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput\r\n        validate={required()}\r\n        source='name'\r\n        fullWidth\r\n        helperText='название гурппы'\r\n        label='название'\r\n      />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  DeleteButton,\r\n  DateField,\r\n  ReferenceField,\r\n  FunctionField,\r\n  downloadCSV,\r\n} from \"react-admin\";\r\nimport { ExportToCsv } from \"export-to-csv\";\r\n\r\nconst exporter = (records: any) => {\r\n  const options = {\r\n    fieldSeparator: \",\",\r\n    quoteStrings: '\"',\r\n    decimalSeparator: \".\",\r\n    showLabels: true,\r\n    showTitle: true,\r\n    title: \"lessons\",\r\n    useTextFile: false,\r\n    useBom: true,\r\n    useKeysAsHeaders: true,\r\n  };\r\n  const exporter = new ExportToCsv(options);\r\n  exporter.generateCsv(records);\r\n};\r\n\r\nexport const GroupSubjectList: React.FC = (props) => {\r\n  return (\r\n    <List\r\n      {...props}\r\n      title='Список занятий'\r\n      sort={{ field: \"startDate\", order: \"DESC\" }}\r\n      exporter={exporter as any}\r\n    >\r\n      <Datagrid rowClick='edit' isRowSelectable={(r) => false}>\r\n        <FunctionField\r\n          label='дата начала урока'\r\n          sortBy='startDate'\r\n          render={(data: any) =>\r\n            new Date(data.startDate).toLocaleString(\"ru-RU\")\r\n          }\r\n        />\r\n        <TextField source='durationInMinutes' label='продолжительность урока' />\r\n\r\n        <ReferenceField label='Предмет' source='subjectId' reference='subject'>\r\n          <TextField source='name' />\r\n        </ReferenceField>\r\n\r\n        <ReferenceField label='Группа' source='groupId' reference='group'>\r\n          <TextField source='name' />\r\n        </ReferenceField>\r\n\r\n        <DeleteButton />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Create,\r\n  DateField,\r\n  ReferenceField,\r\n  SimpleForm,\r\n  DateTimeInput,\r\n  TextInput,\r\n  required,\r\n  number,\r\n  AutocompleteInput,\r\n  ReferenceInput,\r\n} from \"react-admin\";\r\n\r\nexport const GroupSubjectCreate: React.FC = (props) => (\r\n  <Create\r\n    {...props}\r\n    transform={(data: any) => {\r\n      const selectedDate = new Date(data.startDate);\r\n      const time = selectedDate.getTime();\r\n      const offset = selectedDate.getTimezoneOffset() * 6e4;\r\n\r\n      const currentDate = new Date(time - offset);\r\n      return {\r\n        ...data,\r\n        startDate: currentDate.toISOString(),\r\n      };\r\n    }}\r\n  >\r\n    <SimpleForm>\r\n      <DateTimeInput\r\n        source='startDate'\r\n        label='дата начала урока'\r\n        validate={required()}\r\n      />\r\n      <TextInput\r\n        source='durationInMinutes'\r\n        label='продолжительность урока'\r\n        validate={[required(), number()]}\r\n      />\r\n\r\n      <ReferenceInput\r\n        label='Предмет'\r\n        source='subjectId'\r\n        reference='subject'\r\n        validate={required()}\r\n      >\r\n        <AutocompleteInput source='Name' />\r\n      </ReferenceInput>\r\n\r\n      <ReferenceInput\r\n        label='Группа'\r\n        source='groupId'\r\n        reference='group'\r\n        validate={required()}\r\n      >\r\n        <AutocompleteInput source='Name' />\r\n      </ReferenceInput>\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","import React from \"react\";\r\nimport { Admin, Resource, Login } from \"react-admin\";\r\nimport PostIcon from \"@material-ui/icons/Book\";\r\nimport polyglotI18nProvider from \"ra-i18n-polyglot\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\n\r\nimport { dataProvider } from \"./configuration\";\r\n\r\nimport authProvider from \"./authProvider\";\r\nimport LoginForm from \"./pages/LoginForm\";\r\n\r\nimport \"./App.css\";\r\nimport NotFound from \"./components/NotFound/NotFound\";\r\n\r\nimport { TeacherCreate, TeacherEdit, TeacherList } from \"./entities/teachers\";\r\n\r\nimport { SubjectCreate, SubjectEdit, SubjectList } from \"./entities/subject\";\r\n\r\nimport { GroupCreate, GroupEdit, GroupList } from \"./entities/groups\";\r\n\r\nimport { GroupSubjectCreate, GroupSubjectList } from \"./entities/groupSubject\";\r\n\r\nconst russianMessages = require(\"ra-language-russian\");\r\n\r\nconst i18nProvider = polyglotI18nProvider(() => russianMessages, \"ru\");\r\nconst baseTheme = createMuiTheme({});\r\n\r\nconst LoginPage = (props: any) => {\r\n  return (\r\n    <Login {...props}>\r\n      <React.Fragment>\r\n        <LoginForm {...props} />\r\n      </React.Fragment>\r\n    </Login>\r\n  );\r\n};\r\n\r\nexport default function App() {\r\n  return (\r\n    <ThemeProvider theme={baseTheme}>\r\n      <Admin\r\n        theme={baseTheme}\r\n        dataProvider={dataProvider}\r\n        catchAll={NotFound}\r\n        i18nProvider={i18nProvider}\r\n        authProvider={authProvider}\r\n        loginPage={LoginPage}\r\n      >\r\n        <Resource\r\n          name='teacher'\r\n          list={TeacherList}\r\n          create={TeacherCreate}\r\n          edit={TeacherEdit}\r\n          icon={PostIcon}\r\n          options={{\r\n            label: \"Преподаватели\",\r\n          }}\r\n        />\r\n\r\n        <Resource\r\n          name='subject'\r\n          list={SubjectList}\r\n          create={SubjectCreate}\r\n          edit={SubjectEdit}\r\n          icon={PostIcon}\r\n          options={{\r\n            label: \"Предметы\",\r\n          }}\r\n        />\r\n\r\n        <Resource\r\n          name='group'\r\n          list={GroupList}\r\n          create={GroupCreate}\r\n          edit={GroupEdit}\r\n          icon={PostIcon}\r\n          options={{\r\n            label: \"Группы\",\r\n          }}\r\n        />\r\n\r\n        <Resource\r\n          name='groupsubject'\r\n          list={GroupSubjectList}\r\n          create={GroupSubjectCreate}\r\n          icon={PostIcon}\r\n          options={{\r\n            label: \"Занятия\",\r\n          }}\r\n        />\r\n      </Admin>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}